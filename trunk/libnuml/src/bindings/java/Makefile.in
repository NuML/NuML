## @configure_input@
##
## @file    Makefile.in
## @brief   Makefile template for libnuml Python bindings
##
## Begin svn Header
## $Rev::		$:	Revision of last commit
## $Author::	$:	Author of last commit
## $Date::		$:	Date of last commit
## $HeadURL::	$
## $Id::		$
## End svn Header
## ***************************************************************************
## This file is part of libNUML.  Please visit http://code.google.com/p/numl/for more
## information about NUML, and the latest version of libNUML.
## Copyright (c) 2013 The University of Manchester.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation.  A copy of the license agreement is
## provided in the file named "LICENSE.txt" included with this software
## distribution and also available online as http://www.gnu.org/licenses/lgpl.html
##
## The original code was initially developed by:
##
##	SBML Team
##	Control and Dynamical Systems, MC 107-81
##	California Institute of Technology
##	Pasadena, CA, 91125, USA
##
## 	http://www.sbml.org
##	mailto:sbml-team@caltech.edu
##
## Adapted for NUML by:
##
##	NUML Team
##	Computational Systems Biology Group
##  School of Computer Science
## 	The University of Manchester
##	Manchester, M1 7DN UK
##	mailto:josephodada@gmail.com
##
##  Contributor(s):
##  Joseph O. Dada, The University of Manchester - initial LIBNUML API and implementation
## **************************************************************************
##


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir            = @srcdir@
thisdir           = src/bindings/java

sources           = \
                     libnuml_wrap.cpp \
                     javadoc.i

extra_sources     = \
                     libnuml.i \
                     local.cpp \
                     local.i

test_dir          = test
test_source_path  = test/org/numl/libnuml/test

check_sources     = AutoTestRunner.java $(wildcard $(test_source_path)/**/Test*.java)

java_package      = org.numl.$(PACKAGE)
jarfile           = libnumlj.jar
jnifile           = $(JNIBASENAME).$(JNIEXT)

# There are two libraries to build: the shared JNI library, and the Jar file.

libraries         = $(jarfile) $(jnifile)

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CPPFLAGS    = $(JAVA_CPPFLAGS) -I../swig
SWIGFLAGS        += $(JAVA_CPPFLAGS) -I../swig

extra_LDFLAGS     = $(JAVA_LDFLAGS)

extra_LIBS        = ../../libnuml.la $(JAVA_LIBS)

ifdef USE_EXPAT
  extra_CPPFLAGS += @EXPAT_CPPFLAGS@ 
  extra_LDFLAGS  += @EXPAT_LDFLAGS@
  extra_LIBS     += @EXPAT_LIBS@
endif

ifdef USE_XERCES
  extra_CPPFLAGS += @XERCES_CPPFLAGS@
  extra_LDFLAGS  += @XERCES_LDFLAGS@
  extra_LIBS     += @XERCES_LIBS@
endif

ifdef USE_LIBXML
  extra_CPPFLAGS += @LIBXML_CPPFLAGS@
  extra_LDFLAGS  += @LIBXML_LDFLAGS@
  extra_LIBS     += @LIBXML_LIBS@
endif

ifdef USE_LAYOUT
  SWIGFLAGS      += -DUSE_LAYOUT
  extra_CPPFLAGS += -DUSE_LAYOUT
endif # USE_LAYOUT  

# -fno-strict-aliasing option is added to CXXFLAGS when using GCC.
# As written in the SWIG Manual (section 20.2.4), SWIG generated code could cause
# crash problems when compiled by GCC with -fstrict-aliasing option (automatically 
# enabled when using -O2 or higher optimization in GCC 3 or later) and the option 
# should be disabled by adding -fno-strict-aliasing option.
#
# Currently, we know that Java binding library causes crash when it is compiled by
# GCC 4 with -O2 or higher optimization, and the problem can be avoided by adding
# -fno-strict-aliasing option.

ifeq (GCC,$(findstring GCC,$(shell $(CXX) -dumpversion | sed -e 's/^[34]\./GCC/' )))
      CXXFLAGS += -fno-strict-aliasing
endif

#
# By default, the compliance level of eclipse JDT compiler (ecj) is Java 1.4 which 
# doesn't support covariant return types.
# To avoid the incompatible issue, "-5" option which sets the compliance level to Java
# 1.5 is added if ecj is detected.
#
ifeq (1.5 compliance, $(findstring 1.5 compliance, $(shell ${JAVAC} -help 2>&1 | grep "1.5 compliance" )))
  JAVAC_OPTION += -5
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libnuml.so, libxerces-c.so and/or libexpat.so and/or the
# libnuml.so _libnuml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)

# The next set of variable definitions are special to this file and not
# hooks into `makefile-common-actions.mk'.  The values depend in part on
# Java conventions and the output of SWIG.

outdir      = java-files
pkg_path    = $(subst .,/,$(java_package))
outpath     = $(outdir)/$(pkg_path)
java_files  = $(wildcard $(outpath)/*.java)
class_files = $(java_files:.java=.class)

# `distfiles' determines the files and directories included in a
# distribution.  The strategy here is that we include the output of SWIG
# (both libnuml_wrap.cpp and the java files) but not the compiled class
# files.

distfiles   = $(sources) $(extra_sources) $(check_sources) \
  Makefile.in $(java_files)

# `extra_clean' and `extra_distclean' determine the files and directories
# removed during "make clean" and "make distclean".

extra_clean = $(class_files) $(check_sources:.java=.class) test_copy1.xml \
  test_write.xml TestFilenameFilter.class $(wildcard test.xml.*) out.xml

extra_distclean = 


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

# This whole setup is more or less custom and mostly doesn't use the common
# build directives of `makefile-common-actions.mk'.

.SUFFIXES:
.SUFFIXES: .i .cpp .h .java .class .jar .o .obj .so .dylib .lo .la

# The default action is to remake everything.

ifdef USE_JAVA
all: Makefile check_swigfile_consistency
	$(MAKE) -$(MAKEFLAGS) $(libraries)
else
all:
	@echo
	@echo "Reconfigure libNUML using --with-java to enable Java support.";
	@echo
	@exit 1
endif

# The rest here is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.

swig_sources =      \
  $(extra_sources)  \
  ../swig/libnuml.h \
  ../swig/libnuml.i

main_sources = \
  $(shell grep '%include numl' ../swig/libnuml.i | grep -v 'libnuml-version.h' | cut -f2 -d' ' \
    | cut -f2- -d'/' | sed -e '/\//s/^/..\/..\//;/\//!s/^/..\/..\/numl\//')

# MacOS X is different.  We need to compile the .jnilib files using -bundle.

ifeq "$(HOST_TYPE)" "darwin"
  platform_link_flags = -bundle
endif

# The dependencies that follow are an awful tangle.  I wish I could find a
# way to simplify this.  The critical point is that we don't want to put a
# list naming all the .java files explicitly in this Makefile, because any
# change to the output of SWIG could cause a change in the .java files it
# produces and render obsolete any list contained here.  So we have to try
# to wildcard the files, but that in itself is impossible until they're
# generated by running SWIG.  Ugh.

#
# Recreates SWIG files when one of the following conditions is true:
#
#  (1) libnuml_wrap.cpp does not exist
#  (2) libnuml_wrap.cpp exists, but the file is not consistent with the current USE_LAYOUT value. 
#
check_swigfile_consistency:
ifeq (yes, $(findstring yes,$(shell test -f libnuml_wrap.cpp && echo yes)))
else
	$(MAKE) -$(MAKEFLAGS) recreate_java_files
endif   # ifeq (yes...


$(jarfile): $(outpath)/libnuml.class 
	$(CD) $(outdir) && \
	   "$(JAR)" -cvf ../$(jarfile) $(pkg_path)/*.class

$(outpath)/libnuml.class: libnuml_wrap.cpp
	@if ! test -f "$(outpath)/libnuml.java"; then \
		$(MAKE) -$(MAKEFLAGS) recreate_java_files; \
	fi
	"$(JAVAC)" $(JAVAC_OPTION) -d $(outdir) $(outpath)/*.java

# libnuml_wrap.cpp is a stand-in for the .java files.  Its creation results
# in the creation of the .java files too -- both are made by running swig.

libnuml_wrap.cpp $(outpath): javadoc.i $(swig_sources) $(main_sources)
ifdef USE_SWIG
	test -d $(outpath) || mkdir -p $(outpath)
	$(SWIG) $(SWIGFLAGS) $(sort $(default_includes) $(INCLUDES)) \
		-c++ -java -package $(java_package) \
	        -outdir $(outpath) -o libnuml_wrap.cpp libnuml.i
else
	@echo
	@echo "Reconfigure --with-swig in order to rebuild libnuml_wrap.cpp"
	@echo "and the files in the java-files directory."
	@echo
	@exit 1
endif

javadoc.i: $(main_sources) $(swig_sources) ../swig/swigdoc.py
	../swig/swigdoc.py java -I../.. -D../../../docs/src ../swig/libnuml.i javadoc.i

# If USE_SWIG is *not* in effect, things get tricky.  If the last run was
# made with --enable-layout and this one isn't, or vice-versa, the swig
# wrap files will be wrong for this run.  However, you can't tell just by
# looking at file mod times, so you can't use normal make dependencies.  So
# we do this grungy trick of looking at the file to see what's inside.

recreate_java_files:;
ifdef USE_SWIG
	$(MAKE) -$(MAKEFLAGS) clean-swigfiles $(outpath)
endif #USE_SWIG


clean-swigfiles: clean
	-rm -rf $(outdir) libnuml_wrap.cpp 


# -----------------------------------------------------------------------------
# Checking.
# -----------------------------------------------------------------------------

check_classes = $(check_sources:.java=.class)

ifeq "$(HOST_TYPE)" "cygwin"
  classpath = $(shell cygpath -wp $(jarfile):$(TOP_BUILDDIR)/src:$(test_dir):.)
else
  classpath = $(jarfile):$(TOP_BUILDDIR)/src:$(test_dir):.
endif

$(check_classes): Makefile $(libraries) $(check_sources)
	"$(JAVAC)" $(JAVAC_OPTION) -g -classpath "$(classpath)" $(check_sources)

ifdef USE_LIBCHECK
  check: check_swigfile_consistency $(check_classes)
	@echo
	@echo
	@echo Running Tests in $(thisdir)
	@echo -----------------------------------------------------------------
	$(call libnumlrun,"$(JAVA)" -classpath "$(classpath)" AutoTestRunner)
	@echo -----------------------------------------------------------------
	@echo
else
  check:; @echo Please first rerun 'configure' with the --with-check flag; exit 1
endif


# -----------------------------------------------------------------------------
# Tags.
# -----------------------------------------------------------------------------

tags: etags ctags


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

JNI_INSTPATH=$(DESTDIR)$(LIBDIR)/$(jnifile)
JAR_INSTPATH=$(DESTDIR)$(DATADIR)/java/$(jarfile)

install: check_swigfile_consistency $(libraries)
	$(INSTALL_SH) $(jnifile) $(JNI_INSTPATH)
	$(INSTALL_SH) $(jarfile) $(JAR_INSTPATH)

uninstall:
	@list='$(JNI_INSTPATH) $(JAR_INSTPATH)'; for lib in $$list; do \
	  if test -f "$$lib"; then \
	    echo rm "$$lib"; \
	    rm $$lib; \
          fi; \
	done;

installcheck:


# -----------------------------------------------------------------------------
# Creating distribution (for libNUML maintainers only)
# -----------------------------------------------------------------------------

dist: check_swigfile_consistency libnuml_wrap.cpp $(outdir) dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
