/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "libnuml.h"

LIBNUML_CPP_NAMESPACE_USE

#ifdef USE_LAYOUT
#include "../swig/layout.h"
#endif /* USE_LAYOUT */
#include "local.cpp"


#include <string>


#include <iostream>
#include <fstream>
#include <sstream>


#include "OStream.cpp"


  int ASTNode_true(const ASTNode *node)
  {
    return 1;
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ModelCreatorList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< ModelCreator > *)new ListWrapper< ModelCreator >();
  *(ListWrapper< ModelCreator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1ModelCreatorList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ModelCreatorList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  ModelCreator *arg2 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = *(ModelCreator **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ModelCreatorList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int arg2 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModelCreator *)((ListWrapper< ModelCreator > const *)arg1)->get(arg2);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ModelCreatorList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  ModelCreator *arg2 = (ModelCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = *(ModelCreator **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ModelCreatorList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int arg2 ;
  ModelCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ModelCreator *)(arg1)->remove(arg2);
  *(ModelCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ModelCreatorList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< ModelCreator > *arg1 = (ListWrapper< ModelCreator > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ModelCreator > **)&jarg1; 
  result = (unsigned int)((ListWrapper< ModelCreator > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1DateList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< Date > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< Date > *)new ListWrapper< Date >();
  *(ListWrapper< Date > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1DateList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_DateList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  Date *arg2 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DateList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)((ListWrapper< Date > const *)arg1)->get(arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_DateList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  Date *arg2 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = *(Date **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DateList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int arg2 ;
  Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Date *)(arg1)->remove(arg2);
  *(Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DateList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< Date > *arg1 = (ListWrapper< Date > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< Date > **)&jarg1; 
  result = (unsigned int)((ListWrapper< Date > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CVTermList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< CVTerm > *)new ListWrapper< CVTerm >();
  *(ListWrapper< CVTerm > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1CVTermList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CVTermList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CVTermList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int arg2 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CVTerm *)((ListWrapper< CVTerm > const *)arg1)->get(arg2);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CVTermList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  CVTerm *arg2 = (CVTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = *(CVTerm **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CVTermList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int arg2 ;
  CVTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CVTerm *)(arg1)->remove(arg2);
  *(CVTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CVTermList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< CVTerm > *arg1 = (ListWrapper< CVTerm > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< CVTerm > **)&jarg1; 
  result = (unsigned int)((ListWrapper< CVTerm > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ASTNodeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListWrapper< ASTNode > *)new ListWrapper< ASTNode >();
  *(ListWrapper< ASTNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1ASTNodeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNodeList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNodeList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)((ListWrapper< ASTNode > const *)arg1)->get(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNodeList_1prepend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  ASTNode *arg2 = (ASTNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = *(ASTNode **)&jarg2; 
  (arg1)->prepend(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNodeList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int arg2 ;
  ASTNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ASTNode *)(arg1)->remove(arg2);
  *(ASTNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNodeList_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< ASTNode > *arg1 = (ListWrapper< ASTNode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< ASTNode > **)&jarg1; 
  result = (unsigned int)((ListWrapper< ASTNode > const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OStream::StdOSType arg1 ;
  OStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OStream::StdOSType)jarg1; 
  result = (OStream *)new OStream(arg1);
  *(OStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OStream *)new OStream();
  *(OStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1OStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OStream *arg1 = (OStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OStream_1get_1ostream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OStream *arg1 = (OStream *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStream **)&jarg1; 
  result = (std::ostream *)(arg1)->get_ostream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OStream_1endl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OStream *arg1 = (OStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStream **)&jarg1; 
  (arg1)->endl();
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OFStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  char const *arg_pstr1 ;
  std::string arg_str1 ;
  OFStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg_pstr1) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr1);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
    return 0;
  }
  
  arg_str1.assign(mbstr);
  delete[] mbstr;
#else
  arg_str1.assign(arg_pstr1);
#endif
  arg1 = &arg_str1;
  jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
  
  
  arg2 = jarg2 ? true : false; 
  result = (OFStream *)new OFStream((std::string const &)*arg1,arg2);
  *(OFStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OFStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char const *arg_pstr1 ;
  std::string arg_str1 ;
  OFStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg_pstr1) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr1);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
    return 0;
  }
  
  arg_str1.assign(mbstr);
  delete[] mbstr;
#else
  arg_str1.assign(arg_pstr1);
#endif
  arg1 = &arg_str1;
  jenv->ReleaseStringUTFChars(jarg1, arg_pstr1);
  
  
  result = (OFStream *)new OFStream((std::string const &)*arg1);
  *(OFStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1OFStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OFStream *arg1 = (OFStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OFStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OFStream_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  OFStream *arg1 = (OFStream *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return ;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return ;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  arg3 = jarg3 ? true : false; 
  (arg1)->open((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OFStream_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OFStream *arg1 = (OFStream *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return ;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return ;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  (arg1)->open((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OFStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OFStream *arg1 = (OFStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_OFStream_1is_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OFStream *arg1 = (OFStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OFStream **)&jarg1; 
  result = (bool)(arg1)->is_open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OStringStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OStringStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OStringStream *)new OStringStream();
  *(OStringStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OStringStream_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OStringStream *arg1 = (OStringStream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStringStream **)&jarg1; 
  result = (arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OStringStream_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OStringStream *arg1 = (OStringStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OStringStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->str((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1OStringStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OStringStream *arg1 = (OStringStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OStringStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_ASTNode_1true(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ASTNode *arg1 = (ASTNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASTNode **)&jarg1; 
  result = (int)ASTNode_true((ASTNode const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_getLibNUMLVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)getLibNUMLVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_getLibNUMLDottedVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)getLibNUMLDottedVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_getLibNUMLVersionString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)getLibNUMLVersionString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLReader *)new NUMLReader();
  *(NUMLReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLReader *arg1 = (NUMLReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLReader_1readNUML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  NUMLReader *arg1 = (NUMLReader *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLReader **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return 0;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  result = (NUMLDocument *)(arg1)->readNUML((std::string const &)*arg2);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLReader_1readNUMLFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  NUMLReader *arg1 = (NUMLReader *) 0 ;
  std::string *arg2 = 0 ;
  char const *arg_pstr2 ;
  std::string arg_str2 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLReader **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg_pstr2) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr2);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
    return 0;
  }
  
  arg_str2.assign(mbstr);
  delete[] mbstr;
#else
  arg_str2.assign(arg_pstr2);
#endif
  arg2 = &arg_str2;
  jenv->ReleaseStringUTFChars(jarg2, arg_pstr2);
  
  
  result = (NUMLDocument *)(arg1)->readNUMLFromFile((std::string const &)*arg2);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLReader_1readNUMLFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  NUMLReader *arg1 = (NUMLReader *) 0 ;
  std::string *arg2 = 0 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (NUMLDocument *)(arg1)->readNUMLFromString((std::string const &)*arg2);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLReader_1hasZlib(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)NUMLReader::hasZlib();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLReader_1hasBzip2(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)NUMLReader::hasBzip2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_readNUML(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char const *arg_pstr1 ;
  NUMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if (jarg1) {
    arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg_pstr1) return 0;
  }
  else
  {
    arg_pstr1 = 0;
  }
#ifdef WIN32
  arg1 = convertUTF8ToACP(arg_pstr1);
  if (!arg1)
  {
    jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
#else
  arg1 = (char*)arg_pstr1;
#endif
  
  result = (NUMLDocument_t *)readNUML((char const *)arg1);
  *(NUMLDocument_t **)&jresult = result; 
  
#ifdef WIN32
  delete[] arg1;
#else
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char*)arg1);
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_readNUMLFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char const *arg_pstr1 ;
  NUMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if (jarg1) {
    arg_pstr1 = (char const *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg_pstr1) return 0;
  }
  else
  {
    arg_pstr1 = 0;
  }
#ifdef WIN32
  arg1 = convertUTF8ToACP(arg_pstr1);
  if (!arg1)
  {
    jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg1, (const char*)arg_pstr1);
#else
  arg1 = (char*)arg_pstr1;
#endif
  
  result = (NUMLDocument_t *)readNUMLFromFile((char const *)arg1);
  *(NUMLDocument_t **)&jresult = result; 
  
#ifdef WIN32
  delete[] arg1;
#else
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char*)arg1);
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_readNUMLFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NUMLDocument_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (NUMLDocument_t *)readNUMLFromString((char const *)arg1);
  *(NUMLDocument_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLWriter *)new NUMLWriter();
  *(NUMLWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1setProgramName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setProgramName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1setProgramVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setProgramVersion((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1writeNUML_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  NUMLDocument *arg2 = (NUMLDocument *) 0 ;
  std::string *arg3 = 0 ;
  char const *arg_pstr3 ;
  std::string arg_str3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NUMLWriter **)&jarg1; 
  arg2 = *(NUMLDocument **)&jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  arg_pstr3 = (char const *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg_pstr3) return 0;
#ifdef WIN32
  char*  mbstr = convertUTF8ToACP(arg_pstr3);
  if (!mbstr)
  {
    jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
    return 0;
  }
  
  arg_str3.assign(mbstr);
  delete[] mbstr;
#else
  arg_str3.assign(arg_pstr3);
#endif
  arg3 = &arg_str3;
  jenv->ReleaseStringUTFChars(jarg3, arg_pstr3);
  
  
  result = (bool)(arg1)->writeNUML((NUMLDocument const *)arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1writeNUML_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  NUMLDocument *arg2 = (NUMLDocument *) 0 ;
  std::ostream *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(NUMLWriter **)&jarg1; 
  arg2 = *(NUMLDocument **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->writeNUML((NUMLDocument const *)arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1writeToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  NUMLWriter *arg1 = (NUMLWriter *) 0 ;
  NUMLDocument *arg2 = (NUMLDocument *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NUMLWriter **)&jarg1; 
  arg2 = *(NUMLDocument **)&jarg2; 
  result = (char *)(arg1)->writeToString((NUMLDocument const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1hasZlib(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)NUMLWriter::hasZlib();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLWriter_1hasBzip2(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)NUMLWriter::hasBzip2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_writeNUML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  NUMLDocument_t *arg1 = (NUMLDocument_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char const *arg_pstr2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument_t **)&jarg1; 
  
  if (jarg2) {
    arg_pstr2 = (char const *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg_pstr2) return 0;
  }
  else
  {
    arg_pstr2 = 0;
  }
#ifdef WIN32
  arg2 = convertUTF8ToACP(arg_pstr2);
  if (!arg2)
  {
    jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
    return 0;
  }
  jenv->ReleaseStringUTFChars(jarg2, (const char*)arg_pstr2);
#else
  arg2 = (char*)arg_pstr2;
#endif
  
  result = (int)writeNUML((NUMLDocument const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  
#ifdef WIN32
  delete[] arg2;
#else
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char*)arg2);
#endif
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_writeNUMLToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NUMLDocument_t *arg1 = (NUMLDocument_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument_t **)&jarg1; 
  result = (char *)writeNUMLToString((NUMLDocument const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLTypeCode_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  NUMLTypeCode_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (NUMLTypeCode_t)jarg1; 
  result = (char *)NUMLTypeCode_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLConstructorException(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLConstructorException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLConstructorException *)new NUMLConstructorException();
  *(NUMLConstructorException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLConstructorException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLConstructorException *arg1 = (NUMLConstructorException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLConstructorException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NMBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NMBase *arg1 = (NMBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NMBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (NMBase *)((NMBase const *)arg1)->clone();
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (std::string *) &((NMBase const *)arg1)->getMetaId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (std::string *) &((NMBase const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (std::string *) &((NMBase const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getAnnotationString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (arg1)->getAnnotationString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (XMLNamespaces *)((NMBase const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getNUMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (NUMLDocument *)((NMBase const *)arg1)->getNUMLDocument();
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getParentNUMLObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (NMBase *)(arg1)->getParentNUMLObject();
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getAncestorOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  NUMLTypeCode_t arg2 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  arg2 = (NUMLTypeCode_t)jarg2; 
  result = (NMBase *)(arg1)->getAncestorOfType(arg2);
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (unsigned int)((NMBase const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (unsigned int)((NMBase const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1isSetMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (bool)((NMBase const *)arg1)->isSetMetaId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1isSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (bool)((NMBase const *)arg1)->isSetName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1setMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setMetaId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1setNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NMBase **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (int)(arg1)->setNamespaces(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1unsetMetaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (int)(arg1)->unsetMetaId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getCVTerms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (List *)(arg1)->getCVTerms();
  {
    ListWrapper<CVTerm> *listw = (result != 0) ? new ListWrapper<CVTerm>(result) : 0;  
    *( ListWrapper<CVTerm>   **)&jresult = listw;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (unsigned int)((NMBase const *)arg1)->getLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (unsigned int)((NMBase const *)arg1)->getVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (NUMLTypeCode_t)((NMBase const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1hasValidLevelVersionNamespaceCombination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (bool)(arg1)->hasValidLevelVersionNamespaceCombination();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (std::string *) &((NMBase const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1toNUML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (char *)(arg1)->toNUML();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  free(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1hasRequiredAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (bool)((NMBase const *)arg1)->hasRequiredAttributes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NMBase_1hasRequiredElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  NMBase *arg1 = (NMBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NMBase **)&jarg1; 
  result = (bool)((NMBase const *)arg1)->hasRequiredElements();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getDefaultLevel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)NUMLDocument::getDefaultLevel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getDefaultVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)NUMLDocument::getDefaultVersion();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NUMLDocument *)new NUMLDocument(arg1,arg2);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (NUMLDocument *)new NUMLDocument(arg1);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLDocument_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLDocument *)new NUMLDocument();
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLDocument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLDocument_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = 0 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NUMLDocument const & reference is null");
    return 0;
  } 
  result = (NUMLDocument *)new NUMLDocument((NUMLDocument const &)*arg1);
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  NUMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (NUMLDocument *)((NUMLDocument const *)arg1)->clone();
  *(NUMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getNumOntologyTerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (unsigned int)((NUMLDocument const *)arg1)->getNumOntologyTerms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getOntologyTerms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  OntologyTerms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (OntologyTerms *)(arg1)->getOntologyTerms();
  *(OntologyTerms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getResultComponents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  ResultComponents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (ResultComponents *)(arg1)->getResultComponents();
  *(ResultComponents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getNumResultComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (unsigned int)((NUMLDocument const *)arg1)->getNumResultComponents();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1setLevelAndVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setLevelAndVersion(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1setLevelAndVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->setLevelAndVersion(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1createOntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (OntologyTerm *)(arg1)->createOntologyTerm();
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1createResultComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (ResultComponent *)(arg1)->createResultComponent();
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int arg2 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NUMLError *)((NUMLDocument const *)arg1)->getError(arg2);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getNumErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (unsigned int)((NUMLDocument const *)arg1)->getNumErrors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1printErrors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NUMLDocument **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((NUMLDocument const *)arg1)->printErrors(*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1printErrors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  ((NUMLDocument const *)arg1)->printErrors();
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (NUMLTypeCode_t)((NUMLDocument const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (std::string *) &((NUMLDocument const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  NUMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (NUMLErrorLog *)(arg1)->getErrorLog();
  *(NUMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLDocument *arg1 = (NUMLDocument *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLDocument **)&jarg1; 
  result = (XMLNamespaces *)((NUMLDocument const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3,arg4);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2,arg3);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (XMLError *)new XMLError(arg1,(std::string const &)*arg2);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (XMLError *)new XMLError(arg1);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLError *)new XMLError();
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = 0 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLError const & reference is null");
    return 0;
  } 
  result = (XMLError *)new XMLError((XMLError const &)*arg1);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLError *arg1 = (XMLError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getErrorId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getErrorId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getShortMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getShortMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getSeverity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getSeverity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getSeverityAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getSeverityAsString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (unsigned int)((XMLError const *)arg1)->getCategory();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getCategoryAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (std::string *) &((XMLError const *)arg1)->getCategoryAsString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isWarning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isFatal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isFatal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isInternal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isSystem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1isXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  result = (bool)((XMLError const *)arg1)->isXML();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1setLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setLine(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1setColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XMLError *arg1 = (XMLError *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLError **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->setColumn(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLError_1getStandardMessage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = XMLError::getStandardMessage(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  NUMLList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NUMLList *)new NUMLList(arg1,arg2);
  *(NUMLList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  NUMLList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  result = (NUMLList *)new NUMLList(arg1);
  *(NUMLList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLList_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLList *)new NUMLList();
  *(NUMLList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLList *arg1 = (NUMLList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLList *arg1 = 0 ;
  NUMLList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NUMLList const & reference is null");
    return 0;
  } 
  result = (NUMLList *)new NUMLList((NUMLList const &)*arg1);
  *(NUMLList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  result = (NMBase *)((NUMLList const *)arg1)->clone();
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NUMLList *arg1 = (NUMLList *) 0 ;
  NMBase *arg2 = (NMBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NUMLList **)&jarg1; 
  arg2 = *(NMBase **)&jarg2; 
  (arg1)->append((NMBase const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1appendAndOwn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NUMLList *arg1 = (NUMLList *) 0 ;
  NMBase *arg2 = (NMBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NUMLList **)&jarg1; 
  arg2 = *(NMBase **)&jarg2; 
  (arg1)->appendAndOwn(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  unsigned int arg2 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NMBase *)((NUMLList const *)arg1)->get(arg2);
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  NUMLList *arg1 = (NUMLList *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NUMLList *arg1 = (NUMLList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  unsigned int arg2 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NMBase *)(arg1)->remove(arg2);
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  result = (unsigned int)((NUMLList const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  result = (NUMLTypeCode_t)((NUMLList const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  result = (NUMLTypeCode_t)((NUMLList const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  NUMLList *arg1 = (NUMLList *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLList **)&jarg1; 
  result = (std::string *) &((NUMLList const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OntologyTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OntologyTerm *)new OntologyTerm(arg1,arg2);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OntologyTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  result = (OntologyTerm *)new OntologyTerm(arg1);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (OntologyTerm *)((OntologyTerm const *)arg1)->clone();
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (std::string *) &((OntologyTerm const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (std::string *) &((OntologyTerm const *)arg1)->getTerm();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getSourceTermId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (std::string *) &((OntologyTerm const *)arg1)->getSourceTermId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getOntologyURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (std::string *) &((OntologyTerm const *)arg1)->getOntologyURI();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1OntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OntologyTerm **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1setTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setTerm((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1setSourceTermId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setSourceTermId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1setOntologyURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOntologyURI((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (NUMLTypeCode_t)((OntologyTerm const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerm **)&jarg1; 
  result = (std::string *) &((OntologyTerm const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1readAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  XMLAttributes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OntologyTerm **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return ;
  } 
  (arg1)->readAttributes((XMLAttributes const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1writeAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OntologyTerm *arg1 = (OntologyTerm *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OntologyTerm **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((OntologyTerm const *)arg1)->writeAttributes(*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1term_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->term = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1term_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  result = (std::string *) & ((arg1)->term);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1sourceTermId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->sourceTermId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1sourceTermId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  result = (std::string *) & ((arg1)->sourceTermId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1ontologyURI_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ontologyURI = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ONTOLOGY_1ontologyURI_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ONTOLOGY **)&jarg1; 
  result = (std::string *) & ((arg1)->ontologyURI);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ONTOLOGY(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ONTOLOGY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ONTOLOGY *)new ONTOLOGY();
  *(ONTOLOGY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1ONTOLOGY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ONTOLOGY *arg1 = (ONTOLOGY *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ONTOLOGY **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  OntologyTerms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  result = (OntologyTerms *)((OntologyTerms const *)arg1)->clone();
  *(OntologyTerms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  result = (NUMLTypeCode_t)((OntologyTerms const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  result = (NUMLTypeCode_t)((OntologyTerms const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  result = (std::string *) &((OntologyTerms const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  unsigned int arg2 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OntologyTerm *)(arg1)->get(arg2);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  std::string *arg2 = 0 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OntologyTerm *)(arg1)->get((std::string const &)*arg2);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  unsigned int arg2 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OntologyTerm *)(arg1)->remove(arg2);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  std::string *arg2 = 0 ;
  OntologyTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OntologyTerms **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OntologyTerm *)(arg1)->remove((std::string const &)*arg2);
  *(OntologyTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1OntologyTerms(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OntologyTerms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OntologyTerms *)new OntologyTerms();
  *(OntologyTerms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1OntologyTerms(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OntologyTerms *arg1 = (OntologyTerms *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OntologyTerms **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Result_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Result *)new Result();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Result_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Result *)new Result(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Result_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  Result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (Result *)new Result(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  Result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  result = (Result *)((Result const *)arg1)->clone();
  *(Result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  result = (NUMLTypeCode_t)((Result const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  result = (NUMLTypeCode_t)((Result const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  result = (std::string *) &((Result const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  unsigned int arg2 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ResultComponent *)(arg1)->get(arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  std::string *arg2 = 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ResultComponent *)(arg1)->get((std::string const &)*arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  unsigned int arg2 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ResultComponent *)(arg1)->remove(arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Result *arg1 = (Result *) 0 ;
  std::string *arg2 = 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ResultComponent *)(arg1)->remove((std::string const &)*arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1Result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Result *arg1 = (Result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ResultComponent_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (ResultComponent *)new ResultComponent();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ResultComponent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (ResultComponent *)new ResultComponent(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (ResultComponent *)((ResultComponent const *)arg1)->clone();
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (std::string *) &((ResultComponent const *)arg1)->getId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setId((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (std::string *) &((ResultComponent const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ResultComponent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (ResultComponent *)new ResultComponent(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1createDimensionDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (DimensionDescription *)(arg1)->createDimensionDescription();
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1createCompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (CompositeDescription *)(arg1)->createCompositeDescription();
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1createCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (CompositeValue *)(arg1)->createCompositeValue();
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1getDimensionDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (DimensionDescription *)(arg1)->getDimensionDescription();
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponent **)&jarg1; 
  result = (Dimension *)(arg1)->getDimension();
  *(Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1ResultComponent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultComponent *arg1 = (ResultComponent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultComponent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  ResultComponents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  result = (ResultComponents *)((ResultComponents const *)arg1)->clone();
  *(ResultComponents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  result = (NUMLTypeCode_t)((ResultComponents const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  result = (NUMLTypeCode_t)((ResultComponents const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  result = (std::string *) &((ResultComponents const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  unsigned int arg2 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ResultComponent *)(arg1)->get(arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1getResultComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  ResultComponents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  result = (ResultComponents *)(arg1)->getResultComponents();
  *(ResultComponents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  std::string *arg2 = 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ResultComponent *)(arg1)->get((std::string const &)*arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  unsigned int arg2 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ResultComponent *)(arg1)->remove(arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  std::string *arg2 = 0 ;
  ResultComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultComponents **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ResultComponent *)(arg1)->remove((std::string const &)*arg2);
  *(ResultComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1ResultComponents(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ResultComponents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ResultComponents *)new ResultComponents();
  *(ResultComponents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1ResultComponents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultComponents *arg1 = (ResultComponents *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultComponents **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Dimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Dimension *)new Dimension();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Dimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Dimension *)new Dimension(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Dimension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (Dimension *)new Dimension(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  result = (Dimension *)((Dimension const *)arg1)->clone();
  *(Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  result = (NUMLTypeCode_t)((Dimension const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  result = (NUMLTypeCode_t)((Dimension const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  result = (std::string *) &((Dimension const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeValue *)(arg1)->get(arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1getCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  result = (CompositeValue *)(arg1)->getCompositeValue();
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  std::string *arg2 = 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompositeValue *)(arg1)->get((std::string const &)*arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeValue *)(arg1)->remove(arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Dimension *arg1 = (Dimension *) 0 ;
  std::string *arg2 = 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Dimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompositeValue *)(arg1)->remove((std::string const &)*arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1Dimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Dimension *arg1 = (Dimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Dimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1DimensionDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (DimensionDescription *)new DimensionDescription();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1DimensionDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (DimensionDescription *)new DimensionDescription(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1DimensionDescription_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (DimensionDescription *)new DimensionDescription(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  DimensionDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  result = (DimensionDescription *)((DimensionDescription const *)arg1)->clone();
  *(DimensionDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  result = (std::string *) &((DimensionDescription const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((DimensionDescription const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((DimensionDescription const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeDescription *)(arg1)->get(arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1getCompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  result = (CompositeDescription *)(arg1)->getCompositeDescription();
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  std::string *arg2 = 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompositeDescription *)(arg1)->get((std::string const &)*arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeDescription *)(arg1)->remove(arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  std::string *arg2 = 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DimensionDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CompositeDescription *)(arg1)->remove((std::string const &)*arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1DimensionDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DimensionDescription *arg1 = (DimensionDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DimensionDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (CompositeValue *)new CompositeValue();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1CompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CompositeValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (CompositeValue *)new CompositeValue(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (CompositeValue *)new CompositeValue(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (CompositeValue *)((CompositeValue const *)arg1)->clone();
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (NUMLTypeCode_t)((CompositeValue const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getIndexValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (std::string *) &((CompositeValue const *)arg1)->getIndexValue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (std::string *) &((CompositeValue const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1setIndexValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setIndexValue((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setDescription((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (std::string *) &((CompositeValue const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (NUMLTypeCode_t)((CompositeValue const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1isContentCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (bool)((CompositeValue const *)arg1)->isContentCompositeValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1isContentTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (bool)((CompositeValue const *)arg1)->isContentTuple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1isContentAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (bool)((CompositeValue const *)arg1)->isContentAtomicValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeValue *)(arg1)->getCompositeValue(arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (Tuple *)(arg1)->getTuple();
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1getAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (AtomicValue *)(arg1)->getAtomicValue();
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeValue *)((CompositeValue const *)arg1)->get(arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  unsigned int arg2 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeValue *)(arg1)->remove(arg2);
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1readAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  XMLAttributes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return ;
  } 
  (arg1)->readAttributes((XMLAttributes const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1writeAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((CompositeValue const *)arg1)->writeAttributes(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1addCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  CompositeValue *arg2 = (CompositeValue *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = *(CompositeValue **)&jarg2; 
  result = (int)(arg1)->addCompositeValue((CompositeValue const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1createCompositeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  CompositeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (CompositeValue *)(arg1)->createCompositeValue();
  *(CompositeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1createTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (Tuple *)(arg1)->createTuple();
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1createAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeValue **)&jarg1; 
  result = (AtomicValue *)(arg1)->createAtomicValue();
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1setAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  AtomicValue *arg2 = (AtomicValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = *(AtomicValue **)&jarg2; 
  (arg1)->setAtomicValue(arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1setTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CompositeValue *arg1 = (CompositeValue *) 0 ;
  Tuple *arg2 = (Tuple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompositeValue **)&jarg1; 
  arg2 = *(Tuple **)&jarg2; 
  (arg1)->setTuple(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Tuple_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Tuple *)new Tuple();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1Tuple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tuple *arg1 = (Tuple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tuple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Tuple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (Tuple *)new Tuple(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1Tuple_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (Tuple *)new Tuple(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  Tuple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  result = (Tuple *)((Tuple const *)arg1)->clone();
  *(Tuple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  result = (NUMLTypeCode_t)((Tuple const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  result = (NUMLTypeCode_t)((Tuple const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  result = (std::string *) &((Tuple const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1getAtomicValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  unsigned int arg2 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (AtomicValue *)(arg1)->getAtomicValue(arg2);
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1removeAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  unsigned int arg2 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (AtomicValue *)(arg1)->removeAtomicValue(arg2);
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1createAtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tuple **)&jarg1; 
  result = (AtomicValue *)(arg1)->createAtomicValue();
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1createObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Tuple *arg1 = (Tuple *) 0 ;
  XMLInputStream *arg2 = 0 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tuple **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  result = (NMBase *)(arg1)->createObject(*arg2);
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (AtomicValue *)new AtomicValue(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (AtomicValue *)new AtomicValue(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  result = (NUMLTypeCode_t)((AtomicValue const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  result = (std::string *) &((AtomicValue const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  result = (std::string *) &((AtomicValue const *)arg1)->getValue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1getDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  result = (double)(arg1)->getDoubleValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setValue((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1writeChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  XMLOutputStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AtomicValue **)&jarg1; 
  arg2 = *(XMLOutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLOutputStream & reference is null");
    return ;
  } 
  ((AtomicValue const *)arg1)->writeChars(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicValue **)&jarg1; 
  result = (AtomicValue *)((AtomicValue const *)arg1)->clone();
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AtomicValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (AtomicValue *)new AtomicValue();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1AtomicValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AtomicValue *arg1 = (AtomicValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AtomicValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (CompositeDescription *)new CompositeDescription();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1CompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CompositeDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (CompositeDescription *)new CompositeDescription(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1CompositeDescription_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (CompositeDescription *)new CompositeDescription(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (CompositeDescription *)((CompositeDescription const *)arg1)->clone();
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (std::string *) &((CompositeDescription const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getIndexType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (std::string *) &((CompositeDescription const *)arg1)->getIndexType();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1isContentCompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (bool)((CompositeDescription const *)arg1)->isContentCompositeDescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1isContentTupleDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (bool)((CompositeDescription const *)arg1)->isContentTupleDescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1isContentAtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (bool)((CompositeDescription const *)arg1)->isContentAtomicDescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getOntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (std::string *) &((CompositeDescription const *)arg1)->getOntologyTerm();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1setIndexType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setIndexType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1setOntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOntologyTerm((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (std::string *) &((CompositeDescription const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((CompositeDescription const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((CompositeDescription const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getCompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeDescription *)(arg1)->getCompositeDescription(arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getTupleDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (TupleDescription *)(arg1)->getTupleDescription();
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1getAtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (AtomicDescription *)(arg1)->getAtomicDescription();
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeDescription *)(arg1)->get(arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  unsigned int arg2 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (CompositeDescription *)(arg1)->remove(arg2);
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1createCompositeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  CompositeDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (CompositeDescription *)(arg1)->createCompositeDescription();
  *(CompositeDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1createTupleDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (TupleDescription *)(arg1)->createTupleDescription();
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1createAtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CompositeDescription *arg1 = (CompositeDescription *) 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompositeDescription **)&jarg1; 
  result = (AtomicDescription *)(arg1)->createAtomicDescription();
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1TupleDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (TupleDescription *)new TupleDescription();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1TupleDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TupleDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1TupleDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (TupleDescription *)new TupleDescription(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1TupleDescription_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (TupleDescription *)new TupleDescription(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  TupleDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  result = (TupleDescription *)((TupleDescription const *)arg1)->clone();
  *(TupleDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((TupleDescription const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1getItemTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((TupleDescription const *)arg1)->getItemTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  result = (std::string *) &((TupleDescription const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1getAtomicDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  unsigned int arg2 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (AtomicDescription *)(arg1)->getAtomicDescription(arg2);
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1removeAtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  unsigned int arg2 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (AtomicDescription *)(arg1)->removeAtomicDescription(arg2);
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1createAtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TupleDescription **)&jarg1; 
  result = (AtomicDescription *)(arg1)->createAtomicDescription();
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1createObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TupleDescription *arg1 = (TupleDescription *) 0 ;
  XMLInputStream *arg2 = 0 ;
  NMBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TupleDescription **)&jarg1; 
  arg2 = *(XMLInputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLInputStream & reference is null");
    return 0;
  } 
  result = (NMBase *)(arg1)->createObject(*arg2);
  *(NMBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  try {
    result = (AtomicDescription *)new AtomicDescription(arg1,arg2);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NUMLNamespaces *arg1 = (NUMLNamespaces *) 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLNamespaces **)&jarg1; 
  
  try {
    result = (AtomicDescription *)new AtomicDescription(arg1);
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1getTypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  NUMLTypeCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (NUMLTypeCode_t)((AtomicDescription const *)arg1)->getTypeCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1getElementName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (std::string *) &((AtomicDescription const *)arg1)->getElementName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1getValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (std::string *) &((AtomicDescription const *)arg1)->getValueType();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1getOntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (std::string *) &((AtomicDescription const *)arg1)->getOntologyTerm();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (std::string *) &((AtomicDescription const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1setOntologyTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setOntologyTerm((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1setValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setValueType((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->setName((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AtomicDescription **)&jarg1; 
  result = (AtomicDescription *)((AtomicDescription const *)arg1)->clone();
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1AtomicDescription_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AtomicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (AtomicDescription *)new AtomicDescription();
  }
  catch (const NUMLConstructorException &e) {
    jenv->ExceptionClear();
    jclass clazz = jenv->FindClass("org/numl/libnuml/NUMLConstructorException");
    if (clazz)
    jenv->ThrowNew(clazz, e.what());
    return 0;
  }
  
  *(AtomicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1AtomicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AtomicDescription *arg1 = (AtomicDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AtomicDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLAttributes *)new XMLAttributes();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLAttributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLAttributes *arg1 = 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  result = (XMLAttributes *)new XMLAttributes((XMLAttributes const &)*arg1);
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (XMLAttributes *)((XMLAttributes const *)arg1)->clone();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((XMLTriple const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1removeResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeResource(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1remove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1remove_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->remove((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (int)(arg1)->clear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLAttributes const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)((XMLAttributes const *)arg1)->getIndex((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)((XMLAttributes const *)arg1)->getIndex((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (int)((XMLAttributes const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getPrefixedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLAttributes const *)arg1)->getValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLAttributes const *)arg1)->getValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((XMLAttributes const *)arg1)->getValue(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1getValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = ((XMLAttributes const *)arg1)->getValue((XMLTriple const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1hasAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1hasAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1hasAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1hasAttribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLAttributes **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (bool)((XMLAttributes const *)arg1)->hasAttribute((XMLTriple const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLAttributes_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLAttributes *arg1 = (XMLAttributes *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLAttributes **)&jarg1; 
  result = (bool)((XMLAttributes const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNamespaces_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLNamespaces *)new XMLNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLNamespaces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNamespaces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNamespaces *arg1 = 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  result = (XMLNamespaces *)new XMLNamespaces((XMLNamespaces const &)*arg1);
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (XMLNamespaces *)((XMLNamespaces const *)arg1)->clone();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->add((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->remove((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (int)(arg1)->clear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLNamespaces const *)arg1)->getIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getIndexByPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLNamespaces const *)arg1)->getIndexByPrefix(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (int)((XMLNamespaces const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getPrefix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLNamespaces const *)arg1)->getPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getPrefix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLNamespaces const *)arg1)->getPrefix((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getURI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLNamespaces const *)arg1)->getURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getURI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLNamespaces const *)arg1)->getURI((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1getURI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = ((XMLNamespaces const *)arg1)->getURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  result = (bool)((XMLNamespaces const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1hasURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasURI((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1hasPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasPrefix((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNamespaces_1hasNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLNamespaces *arg1 = (XMLNamespaces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNamespaces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLNamespaces const *)arg1)->hasNS((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLToken *)new XMLToken();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4,arg5);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3,arg4);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,arg2,arg3);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1,arg2);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (XMLToken *)new XMLToken((XMLTriple const &)*arg1);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (XMLToken *)new XMLToken((std::string const &)*arg1,arg2,arg3);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (XMLToken *)new XMLToken((std::string const &)*arg1,arg2);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLToken *)new XMLToken((std::string const &)*arg1);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLToken *arg1 = (XMLToken *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLToken **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLToken_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (XMLToken *)new XMLToken((XMLToken const &)*arg1);
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLToken *)((XMLToken const *)arg1)->clone();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLAttributes *) &((XMLToken const *)arg1)->getAttributes();
  *(XMLAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1setAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLAttributes *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setAttributes((XMLAttributes const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addAttr((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addAttr((XMLTriple const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeAttr(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->removeAttr((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeAttr((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->removeAttr((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1clearAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->clearAttributes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)((XMLToken const *)arg1)->getAttrIndex((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttributesLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)((XMLToken const *)arg1)->getAttributesLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrPrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrPrefixedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getAttrValue(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getAttrValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = ((XMLToken const *)arg1)->getAttrValue((XMLTriple const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasAttr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasAttr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (bool)((XMLToken const *)arg1)->hasAttr((XMLTriple const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isAttributesEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isAttributesEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLNamespaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (XMLNamespaces *) &((XMLToken const *)arg1)->getNamespaces();
  *(XMLNamespaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1setNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLNamespaces *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLNamespaces **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setNamespaces((XMLNamespaces const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->addNamespace((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1addNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->addNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeNamespace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeNamespace(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1removeNamespace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->removeNamespace((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1clearNamespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->clearNamespaces();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaceIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getNamespaceIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaceIndexByPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((XMLToken const *)arg1)->getNamespaceIndexByPrefix((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespacesLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)((XMLToken const *)arg1)->getNamespacesLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespacePrefix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getNamespacePrefix(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespacePrefix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getNamespacePrefix((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaceURI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XMLToken const *)arg1)->getNamespaceURI(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaceURI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((XMLToken const *)arg1)->getNamespaceURI((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getNamespaceURI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = ((XMLToken const *)arg1)->getNamespaceURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isNamespacesEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isNamespacesEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasNamespaceURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespaceURI((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasNamespacePrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespacePrefix((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1hasNamespaceNS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((XMLToken const *)arg1)->hasNamespaceNS((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1setTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLTriple *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->setTriple((XMLTriple const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getURI();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getCharacters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (std::string *) &((XMLToken const *)arg1)->getCharacters();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->append((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (unsigned int)((XMLToken const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (unsigned int)((XMLToken const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isElement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isEnd();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isEndFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  XMLToken *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLToken **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (bool)((XMLToken const *)arg1)->isEndFor((XMLToken const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isEOF();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isStart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1isText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (bool)((XMLToken const *)arg1)->isText();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1setEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->setEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1setEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->setEOF();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1unsetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (int)(arg1)->unsetEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLToken_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLToken *arg1 = (XMLToken *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLNode *)new XMLNode();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLToken *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLToken **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return 0;
  } 
  result = (XMLNode *)new XMLNode((XMLToken const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4,arg5);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  unsigned int arg4 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3,arg4);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNamespaces *arg3 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = *(XMLNamespaces **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNamespaces const & reference is null");
    return 0;
  } 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,(XMLNamespaces const &)*arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3,arg4);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2,arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLAttributes *arg2 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = *(XMLAttributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLAttributes const & reference is null");
    return 0;
  } 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,(XMLAttributes const &)*arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,arg2,arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1,arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (XMLNode *)new XMLNode((XMLTriple const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (XMLNode *)new XMLNode((std::string const &)*arg1,arg2,arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *)new XMLNode((std::string const &)*arg1,arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLNode *)new XMLNode((std::string const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLNode *arg1 = (XMLNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLNode_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (XMLNode *)new XMLNode((XMLNode const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (XMLNode *)((XMLNode const *)arg1)->clone();
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  XMLNode *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = *(XMLNode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->addChild((XMLNode const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1insertChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *arg3 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(XMLNode **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLNode const & reference is null");
    return 0;
  } 
  result = (XMLNode *) &(arg1)->insertChild(arg2,(XMLNode const &)*arg3);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *)(arg1)->removeChild(arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1removeChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (int)(arg1)->removeChildren();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1getChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int arg2 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLNode *) &(arg1)->getChild(arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = (unsigned int)((XMLNode const *)arg1)->getNumChildren();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = ((XMLNode const *)arg1)->toXMLString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1convertXMLNodeToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLNode *arg1 = (XMLNode *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLNode **)&jarg1; 
  result = XMLNode::convertXMLNodeToString((XMLNode const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1convertStringToXMLNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNamespaces *arg2 = (XMLNamespaces *) 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(XMLNamespaces **)&jarg2; 
  result = (XMLNode *)XMLNode::convertStringToXMLNode((std::string const &)*arg1,(XMLNamespaces const *)arg2);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1convertStringToXMLNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLNode *)XMLNode::convertStringToXMLNode((std::string const &)*arg1);
  *(XMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTriple_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLTriple *)new XMLTriple();
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTriple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTriple_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  char arg2 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (char)jarg2; 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1,arg2);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTriple_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XMLTriple *)new XMLTriple((std::string const &)*arg1);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTriple_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return 0;
  } 
  result = (XMLTriple *)new XMLTriple((XMLTriple const &)*arg1);
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1cloneObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  XMLTriple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (XMLTriple *)((XMLTriple const *)arg1)->clone();
  *(XMLTriple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getPrefix();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1getURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (std::string *) &((XMLTriple const *)arg1)->getURI();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1getPrefixedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = ((XMLTriple const *)arg1)->getPrefixedName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTriple_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTriple **)&jarg1; 
  result = (bool)((XMLTriple const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLTriple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLTriple *arg1 = (XMLTriple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLTriple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLInputStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  XMLErrorLog *arg4 = (XMLErrorLog *) 0 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(XMLErrorLog **)&jarg4; 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2,arg3,arg4);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLInputStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2,arg3);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLInputStream_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1,arg2);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLInputStream_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  XMLInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (XMLInputStream *)new XMLInputStream((char const *)arg1);
  *(XMLInputStream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLInputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLInputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1getEncoding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (std::string *) &(arg1)->getEncoding();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (std::string *) &(arg1)->getVersion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1getErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (XMLErrorLog *)(arg1)->getErrorLog();
  *(XMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1isEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isEOF();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1isGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (bool)((XMLInputStream const *)arg1)->isGood();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (arg1)->next();
  *(XMLToken **)&jresult = new XMLToken((const XMLToken &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (XMLToken *) &(arg1)->peek();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1skipPastEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLInputStream **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->skipPastEnd((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1skipText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  (arg1)->skipText();
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1setErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  XMLErrorLog *arg2 = (XMLErrorLog *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLInputStream **)&jarg1; 
  arg2 = *(XMLErrorLog **)&jarg2; 
  result = (int)(arg1)->setErrorLog(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLInputStream_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLInputStream *arg1 = (XMLInputStream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLInputStream **)&jarg1; 
  result = (arg1)->getContent();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLOutputStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLOutputStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLOutputStream_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2,arg3);
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLOutputStream_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (XMLOutputStream *)new XMLOutputStream(*arg1,(std::string const &)*arg2);
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLOutputStream_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  XMLOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  result = (XMLOutputStream *)new XMLOutputStream(*arg1);
  *(XMLOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1endElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->endElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1endElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->endElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1setAutoIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoIndent(arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1startElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1startElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->startElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1startEndElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startEndElement((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1startEndElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  (arg1)->startEndElement((XMLTriple const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeAttribute((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((std::string const &)*arg2,(long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeAttribute_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  XMLTriple *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  arg2 = *(XMLTriple **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLTriple const & reference is null");
    return ;
  } 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->writeAttribute((XMLTriple const &)*arg2,(long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeXMLDecl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->writeXMLDecl();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1writeComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->writeComment((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1downIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->downIndent();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLOutputStream_1upIndent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLOutputStream **)&jarg1; 
  (arg1)->upIndent();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLOutputStream *arg1 = (XMLOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLOutputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLErrorLog_1getNumErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  result = (unsigned int)((XMLErrorLog const *)arg1)->getNumErrors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLErrorLog_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  unsigned int arg2 ;
  XMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (XMLError *)((XMLErrorLog const *)arg1)->getError(arg2);
  *(XMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLErrorLog_1clearLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLErrorLog **)&jarg1; 
  (arg1)->clearLog();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLErrorLog *arg1 = (XMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLErrorLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  XMLHandler *arg1 = 0 ;
  std::string arg2 ;
  XMLParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLHandler & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (XMLParser *)XMLParser::create(*arg1,arg2);
  *(XMLParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLHandler *arg1 = 0 ;
  XMLParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLHandler & reference is null");
    return 0;
  } 
  result = (XMLParser *)XMLParser::create(*arg1);
  *(XMLParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLParser *arg1 = (XMLParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parse((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parse((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parseFirst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFirst((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parseFirst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseFirst((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parseNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  result = (bool)(arg1)->parseNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1parseReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLParser *arg1 = (XMLParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  (arg1)->parseReset();
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  result = (unsigned int)((XMLParser const *)arg1)->getColumn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  result = (unsigned int)((XMLParser const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1getErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  XMLErrorLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLParser **)&jarg1; 
  result = (XMLErrorLog *)(arg1)->getErrorLog();
  *(XMLErrorLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_numl_libnuml_libnumlJNI_XMLParser_1setErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  XMLErrorLog *arg2 = (XMLErrorLog *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLParser **)&jarg1; 
  arg2 = *(XMLErrorLog **)&jarg2; 
  result = (int)(arg1)->setErrorLog(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLHandler *)new XMLHandler();
  *(XMLHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1startDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLHandler **)&jarg1; 
  (arg1)->startDocument();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1XML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->XML((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1startElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLHandler **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->startElement((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1endDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLHandler **)&jarg1; 
  (arg1)->endDocument();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1endElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLHandler **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->endElement((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLHandler_1characters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLHandler *arg1 = (XMLHandler *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLHandler **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->characters((XMLToken const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1XMLTokenizer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XMLTokenizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XMLTokenizer *)new XMLTokenizer();
  *(XMLTokenizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1XMLTokenizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLTokenizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1getEncoding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (std::string *) &(arg1)->getEncoding();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (std::string *) &(arg1)->getVersion();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (bool)((XMLTokenizer const *)arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1isEOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (bool)((XMLTokenizer const *)arg1)->isEOF();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  XMLToken result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (arg1)->next();
  *(XMLToken **)&jresult = new XMLToken((const XMLToken &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  XMLToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (XMLToken *) &(arg1)->peek();
  *(XMLToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1XML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->XML((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1startElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->startElement((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1endDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  (arg1)->endDocument();
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1endElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->endElement((XMLToken const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1characters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XMLTokenizer *arg1 = (XMLTokenizer *) 0 ;
  XMLToken *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XMLTokenizer **)&jarg1; 
  arg2 = *(XMLToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XMLToken const & reference is null");
    return ;
  } 
  (arg1)->characters((XMLToken const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLErrorLog_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  NUMLErrorLog *arg1 = (NUMLErrorLog *) 0 ;
  unsigned int arg2 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NUMLError *)((NUMLErrorLog const *)arg1)->getError(arg2);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLErrorLog_1getNumFailsWithSeverity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  NUMLErrorLog *arg1 = (NUMLErrorLog *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLErrorLog **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getNumFailsWithSeverity(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLErrorLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLErrorLog *arg1 = (NUMLErrorLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLErrorLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6,arg7);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  unsigned int arg5 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned int)jarg5; 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3,(std::string const &)*arg4);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (NUMLError *)new NUMLError(arg1,arg2,arg3);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (NUMLError *)new NUMLError(arg1,arg2);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (NUMLError *)new NUMLError(arg1);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_18(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NUMLError *)new NUMLError();
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_new_1NUMLError_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NUMLError *arg1 = 0 ;
  NUMLError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NUMLError **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NUMLError const & reference is null");
    return 0;
  } 
  result = (NUMLError *)new NUMLError((NUMLError const &)*arg1);
  *(NUMLError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_numl_libnuml_libnumlJNI_delete_1NUMLError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NUMLError *arg1 = (NUMLError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NUMLError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OFStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OStream **)&baseptr = *(OFStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OStringStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OStream **)&baseptr = *(OStringStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLDocument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(NUMLDocument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLList_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(NUMLList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerm_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(OntologyTerm **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_OntologyTerms_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(OntologyTerms **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Result_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(Result **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(ResultComponent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_ResultComponents_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(ResultComponents **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Dimension_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(Dimension **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_DimensionDescription_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(DimensionDescription **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeValue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(CompositeValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_Tuple_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(Tuple **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicValue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(AtomicValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_CompositeDescription_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(CompositeDescription **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_TupleDescription_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NUMLList **)&baseptr = *(TupleDescription **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_AtomicDescription_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(NMBase **)&baseptr = *(AtomicDescription **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLToken **)&baseptr = *(XMLNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_XMLTokenizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLHandler **)&baseptr = *(XMLTokenizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLErrorLog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLErrorLog **)&baseptr = *(NUMLErrorLog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_numl_libnuml_libnumlJNI_NUMLError_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XMLError **)&baseptr = *(NUMLError **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

